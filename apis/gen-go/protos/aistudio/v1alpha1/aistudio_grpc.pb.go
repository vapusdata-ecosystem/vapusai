// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: protos/aistudio/v1alpha1/aistudio.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VapusAiStudio_StudioSpaceInterface_FullMethodName          = "/aistudio.v1alpha1.VapusAiStudio/StudioSpaceInterface"
	VapusAiStudio_AIModelConfigurationInterface_FullMethodName = "/aistudio.v1alpha1.VapusAiStudio/AIModelConfigurationInterface"
)

// VapusAiStudioClient is the client API for VapusAiStudio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VapusAiStudioClient interface {
	StudioSpaceInterface(ctx context.Context, in *StudioSpaceRequest, opts ...grpc.CallOption) (*StudioSpaceResponse, error)
	AIModelConfigurationInterface(ctx context.Context, in *AIModelConfigurationRequest, opts ...grpc.CallOption) (*AIModelConfigurationResponse, error)
}

type vapusAiStudioClient struct {
	cc grpc.ClientConnInterface
}

func NewVapusAiStudioClient(cc grpc.ClientConnInterface) VapusAiStudioClient {
	return &vapusAiStudioClient{cc}
}

func (c *vapusAiStudioClient) StudioSpaceInterface(ctx context.Context, in *StudioSpaceRequest, opts ...grpc.CallOption) (*StudioSpaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StudioSpaceResponse)
	err := c.cc.Invoke(ctx, VapusAiStudio_StudioSpaceInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vapusAiStudioClient) AIModelConfigurationInterface(ctx context.Context, in *AIModelConfigurationRequest, opts ...grpc.CallOption) (*AIModelConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AIModelConfigurationResponse)
	err := c.cc.Invoke(ctx, VapusAiStudio_AIModelConfigurationInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VapusAiStudioServer is the server API for VapusAiStudio service.
// All implementations must embed UnimplementedVapusAiStudioServer
// for forward compatibility
type VapusAiStudioServer interface {
	StudioSpaceInterface(context.Context, *StudioSpaceRequest) (*StudioSpaceResponse, error)
	AIModelConfigurationInterface(context.Context, *AIModelConfigurationRequest) (*AIModelConfigurationResponse, error)
	mustEmbedUnimplementedVapusAiStudioServer()
}

// UnimplementedVapusAiStudioServer must be embedded to have forward compatible implementations.
type UnimplementedVapusAiStudioServer struct {
}

func (UnimplementedVapusAiStudioServer) StudioSpaceInterface(context.Context, *StudioSpaceRequest) (*StudioSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudioSpaceInterface not implemented")
}
func (UnimplementedVapusAiStudioServer) AIModelConfigurationInterface(context.Context, *AIModelConfigurationRequest) (*AIModelConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AIModelConfigurationInterface not implemented")
}
func (UnimplementedVapusAiStudioServer) mustEmbedUnimplementedVapusAiStudioServer() {}

// UnsafeVapusAiStudioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VapusAiStudioServer will
// result in compilation errors.
type UnsafeVapusAiStudioServer interface {
	mustEmbedUnimplementedVapusAiStudioServer()
}

func RegisterVapusAiStudioServer(s grpc.ServiceRegistrar, srv VapusAiStudioServer) {
	s.RegisterService(&VapusAiStudio_ServiceDesc, srv)
}

func _VapusAiStudio_StudioSpaceInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudioSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VapusAiStudioServer).StudioSpaceInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VapusAiStudio_StudioSpaceInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VapusAiStudioServer).StudioSpaceInterface(ctx, req.(*StudioSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VapusAiStudio_AIModelConfigurationInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIModelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VapusAiStudioServer).AIModelConfigurationInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VapusAiStudio_AIModelConfigurationInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VapusAiStudioServer).AIModelConfigurationInterface(ctx, req.(*AIModelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VapusAiStudio_ServiceDesc is the grpc.ServiceDesc for VapusAiStudio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VapusAiStudio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aistudio.v1alpha1.VapusAiStudio",
	HandlerType: (*VapusAiStudioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StudioSpaceInterface",
			Handler:    _VapusAiStudio_StudioSpaceInterface_Handler,
		},
		{
			MethodName: "AIModelConfigurationInterface",
			Handler:    _VapusAiStudio_AIModelConfigurationInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/aistudio/v1alpha1/aistudio.proto",
}
